{"version":3,"sources":["types/FilterType.ts","app/hooks.ts","features/currentTodo.ts","components/TodoList/TodoList.tsx","features/filter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","features/todos.ts","App.tsx","app/store.ts","index.tsx"],"names":["FilterType","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","todo","type","payload","currentTodoReducer","state","action","TodoList","todos","dispatch","currentTodo","className","map","id","title","completed","classNames","onClick","currentTodoActions","query","status","initialState","All","filterReducer","TodoFilter","filter","onChange","event","target","value","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","useState","user","setUser","useEffect","fetchUser","a","selectedUser","Error","href","email","name","todosReducer","App","fetchTodos","useCallback","todosFromServer","todosActions","visibleTodos","useMemo","todosToFilter","Completed","Active","toLowerCase","includes","length","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4421ba6.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => (\n  { type: 'currentTodo/REMOVE' }\n);\n\nconst setTodo = (todo: Todo): SetTodoAction => (\n  { type: 'currentTodo/SET', payload: todo }\n);\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className=\"has-background-info-white\"\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={\n                  classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })\n                }\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {currentTodo?.id === id\n                  ? (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button is-link\"\n                      type=\"button\"\n                      onClick={() => dispatch(currentTodoActions.removeTodo())}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye-slash\" />\n                      </span>\n                    </button>\n                  ) : (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye\" />\n                      </span>\n                    </button>\n                  )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../types/Status';\nimport { State } from '../types/State';\nimport { FilterType } from '../types/FilterType';\n\ntype ChangeQueryAction = {\n  type: 'query/CHANGE',\n  payload: string,\n};\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'query/CHANGE',\n  payload: query,\n});\n\ntype ChangeStatusAction = {\n  type: 'status/CHANGE',\n  payload: Status,\n};\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'status/CHANGE',\n  payload: status,\n});\n\nexport const actions = { changeQuery, changeStatus };\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\n\nconst initialState: State = {\n  query: '',\n  status: FilterType.All,\n};\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'query/CHANGE':\n      return { ...state, query: action.payload };\n\n    case 'status/CHANGE':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { FilterType } from '../../types/FilterType';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const filter = event.target.value as FilterType;\n\n    dispatch(filterActions.changeStatus(filter));\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => (\n    dispatch(filterActions.changeQuery(event.target.value))\n  );\n\n  const clearInput = () => dispatch(filterActions.changeQuery(''));\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const selectedUser = await getUser(userId);\n\n        setUser(selectedUser);\n      } catch (error) {\n        throw new Error('Error while selecting user');\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const closeModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\" key={user.id}>\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              <span>{' by '}</span>\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (state: Todo[] = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","/* eslint-disable max-len */\nimport React, {\n  useEffect, useMemo, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { FilterType } from './types/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  const fetchTodos = useCallback(async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    } catch (error) {\n      throw new Error('Error while loading todos');\n    }\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    let todosToFilter;\n\n    switch (status) {\n      case FilterType.All:\n        todosToFilter = todos;\n        break;\n\n      case FilterType.Completed:\n        todosToFilter = todos.filter(todo => todo.completed);\n        break;\n\n      case FilterType.Active:\n        todosToFilter = todos.filter(todo => !todo.completed);\n        break;\n\n      default:\n        todosToFilter = todos;\n        break;\n    }\n\n    return todosToFilter.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }, [todos, query, status]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, [fetchTodos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          todo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}